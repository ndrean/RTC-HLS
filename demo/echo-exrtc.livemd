# Echo server with SFU ExWebRTC

```elixir
Mix.install([
  {:kino, "~> 0.13.1"},
  {:ex_webrtc, "~> 0.3.0"}
])
```

## SFU: ExWebRTC

### Server-side WebRTC module

```elixir
defmodule RtcServer do
  use GenServer

  alias ExWebRTC.{ICECandidate, PeerConnection, SessionDescription, MediaStreamTrack}
  #alias ExWebRTC.RTP.VP8Depayloader

  require Logger

  defp ice_servers(), do: [%{urls: "stun:stun.l.google.com:19302"}]

  defp setup_transceivers(pc) do
    media_stream_id = MediaStreamTrack.generate_stream_id()
    video_track = MediaStreamTrack.new(:video, [media_stream_id])
    {:ok, _sender} = PeerConnection.add_track(pc, video_track)
    %{serv_video_track: video_track}
  end

  def start_link(args), do: GenServer.start_link(__MODULE__, args, name: __MODULE__)
  def connect, do: GenServer.call(__MODULE__, :connect)

  def receive_signaling_msg({msg, sender}) do
    GenServer.cast(__MODULE__, {:receive_signaling_msg, msg, sender})
  end

  def peek_state, do: GenServer.call(__MODULE__, :peek_state)

  @impl true
  def init(_args) do
    Logger.info("ExRtc PeerConnection started")
    {:ok, %{
      sender: nil,
      pc: nil,
      client_video_track: nil,
      #video_deplayloader: VP8Depayloader.new()
    }}
  end

  # Livebook calls
  @impl true
  def handle_call(:peek_state, _, state) do
    {:reply, state, state}
  end

  def handle_call(:connect, _, state) do
    {:ok, pc_pid} = PeerConnection.start_link(ice_servers: ice_servers())

    state = %{state | pc: pc_pid} |> Map.merge(setup_transceivers(pc_pid))
    {:reply, :connected, state}
  end

  # messages received from the client
  @impl true
  def handle_cast({:receive_signaling_msg, %{"type"=> "offer"} = msg, sender},state) do
    with desc <-
           SessionDescription.from_json(msg),
         :ok <-
           PeerConnection.set_remote_description(state.pc, desc),
         {:ok, answer} <-
           PeerConnection.create_answer(state.pc),
         :ok <-
           PeerConnection.set_local_description(state.pc, answer),
         :ok <-
           gather_candidates(state.pc) do
      Logger.warning("--> Server sends Answer to remote")

      #  the 'answer' is formatted into a struct, which can't be read by the JS client
      answer = %{"type" =>  "answer", "sdp" => answer.sdp}


      send(sender, {:signaling, answer})
      {:noreply, %{state | sender: sender}}
    else
      error ->
        Logger.error("Server: Error creating answer: #{inspect(error)}")
        {:stop, :shutdown, state}
    end
  end

  def handle_cast({:receive_signaling_msg, %{"type"=> "ice"} = msg, _sender}, state) do
    candidate = ICECandidate.from_json(msg["candidate"])
    :ok = PeerConnection.add_ice_candidate(state.pc, candidate)
    Logger.debug("--> Server processes remote ICE")
    {:noreply, state}
  end

  def handle_cast({:receive_signaling_msg, {msg, _}}, state) do
    Logger.warning("Server: unexpected msg: #{inspect(msg)}")
    {:stop, :shutdown, state}
  end

  @impl true
  def handle_info({:ex_webrtc, _pc, {:track, %{kind: :video} = client_video_track}}, state) do
    {:noreply, %{state | client_video_track: client_video_track}}
  end

  # internal messages --------
  def handle_info({:ex_webrtc, _pc, {:ice_candidate, candidate}}, state) do
    candidate = ICECandidate.to_json(candidate)
    send(state.sender, {:signaling, %{"type"=> "ice", "candidate" => candidate}})
    Logger.debug("--> Server sends ICE to remote")
    {:noreply, state}
  end

  def handle_info(
        {:ex_webrtc, pc, {:rtp, client_track_id, _rid, packet}},
        %{client_video_track: %{id: client_track_id, kind: :video}} = state
      ) do
    PeerConnection.send_rtp(pc, state.serv_video_track.id, packet)
    {:noreply, state}
  end

  def handle_info({:ex_webrtc, pc, {:connection_state_change, :connected}}, state) do
    sdp = PeerConnection.get_remote_description(pc).sdp
    Regex.scan(~r/a=rtpmap:([a-zA-Z0-9\s]+)/, sdp) |> dbg()

    Logger.warning("Server to client PeerConnection #{inspect(pc)} successfully connected")
    {:noreply, state}
  end

  def handle_info({:ex_webrtc, _pc, _msg}, state) do
    {:noreply, state}
  end

  defp gather_candidates(pc) do
    receive do
      {:ex_webrtc, ^pc, {:ice_gathering_state_change, :complete}} -> :ok
    after
      1000 -> {:error, :timeout}
    end
  end
end
```

Start the GenServer

```elixir
Supervisor.start_link([RtcServer], strategy: :one_for_one, name: MySup)
```

and instantiate a new PeerConnection:

```elixir
RtcServer.connect()
```

This will instantiate a `ExWebRTC.PeerConnection` server-side. 
It is waiting for a peer to connect and receive its offer. It will respond with an "answer", digest the peer's Ice candidates, and send to the peer its own ICE candidates.

```elixir
RtcServer.peek_state()
```

### Client-side WebRTC module

The signaling is via the WebSocket connection that exists in a Livebook between the browser and the server.

On connection, a new `PeerConnection` is created. Since the server is already connected, the client will send an "offer" via the signaling channel. The client expects an "answer" back. It will also send "Ice" candidates via the signaling channel, and expects to receive Ice candidates from the server.

Once the connection is set, the client will receive RTP packets and digest them into an `<video>` element.

```elixir

defmodule VideoLive do

  use Kino.JS
  use Kino.JS.Live

  require Logger

  @html """
    <div id="elt">
      <figure>
        <video id="video-in" width="300" height="300" muted autoplay playsinline></video>
        <figcaption>Local webcam</figcaption>
      </figure>
      <br/>
      <figure>
        <video id="echo" width="300" height="300" autoplay muted playsinline></video>
        <figcaption>Echo webcam</figcaption>
      </figure>
    </div>
    """

  def new() do
    Kino.JS.Live.new(__MODULE__, @html)
  end

  asset "main.css" do
    """
    #elt {
      display: flex;
      flex-direction: column;
      align-items: center
    }
    button {
      margin-top: 1em;
      margin-bottom: 1em;
      padding: 1em;
      background-color: bisque;
    }
    """
  end

  asset "main.js" do
    """
    export function init(ctx, html) {
      ctx.importCSS("main.css");
      ctx.root.innerHTML = html;

      const iceConf = {
        iceServers: [{ urls: "stun:stun.l.google.com:19302" }],
      };

      function run() {
        window.navigator.mediaDevices
          .getUserMedia({ video: { width: 300, height: 300 }, audio: false })
          .then((stream) => {
            let videoIn = document.getElementById("video-in"),
              send = true;

            videoIn.srcObject = stream;

            const pc = new RTCPeerConnection(iceConf);
            const tracks = stream.getTracks();
            tracks.forEach((track) => pc.addTrack(track, stream));

            pc.onicecandidate = ({candidate}) => { 
              if (candidate === null) { return};
              ctx.pushEvent("ice", { candidate: candidate.toJSON(), type: "ice" });
            };

            pc.ontrack = ({ streams }) => {
              console.log("--> Received remote track");
              const echo = document.querySelector("#echo");
              console.log(streams[0])
              echo.srcObject = streams[0];
              //echo.onlodadeddata = () => echo.play()
            };

            pc.onnegotiationneeded = async () => {
              const offer = await pc.createOffer();
              await pc.setLocalDescription(offer);
              console.log("--> Offer created and sent");
              ctx.pushEvent("offer", { sdp: offer});
            };

            pc.onconnectionstatechange = () => {
              console.log("~~> Connection state: ", pc.connectionState);
            };

            ctx.handleEvent("ice", async ({candidate}) => {
              await pc.addIceCandidate(candidate);
            });

            ctx.handleEvent("answer", async (msg) => {
              console.log("--> handled Answer");
              await pc.setRemoteDescription(msg);
            });
          });
      }
      run()
    }
    """
  end

  @impl true
  def init(html, ctx) do
    {:ok, assign(ctx, html: html)}
  end

  @impl true
  def handle_connect(ctx) do
    {:ok, ctx.assigns.html, ctx}
  end

  # received from the browser, call server
  @impl true
  def handle_event("offer",%{"sdp" => sdp}, ctx) do
    RtcServer.receive_signaling_msg({sdp, self()})
    {:noreply, ctx}
  end
  
  def handle_event("ice",%{"candidate" => candidate}, ctx) do
    RtcServer.receive_signaling_msg({%{"type" => "ice", "candidate" => candidate}, self()})
    {:noreply, ctx}
  end

  # received from the server, send to the browser
  @impl true
  def handle_info({:signaling, %{"type" => "answer"} = msg}, ctx) do
    broadcast_event(ctx, "answer", msg)
    {:noreply, ctx}
  end

  def handle_info({:signaling, %{"type" => "ice"} = msg}, ctx) do
    if msg["candidate"], do: broadcast_event(ctx, "ice",msg)
    {:noreply, ctx}
  end

end
```

```elixir
VideoLive.new()
```

The PeerConnection server-side is now populated:

```elixir
RtcServer.peek_state()
```
